#!/usr/bin/env node

/**
 * ÁÆ°ÁêÜËÄÖÊ®©Èôê‰ªò‰∏é„Çπ„ÇØ„É™„Éó„Éà
 * ÁâπÂÆö„ÅÆ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Å´ÁÆ°ÁêÜËÄÖÊ®©Èôê„Çí‰ªò‰∏é
 */

import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function setAdmin() {
  try {
    console.log('üîß Setting admin privileges...');
    
    const adminEmail = 'kentaro20040623@gmail.com';
    
    // „Åæ„Åö„ÄÅÂøÖË¶Å„Å™„Éï„Ç£„Éº„É´„Éâ„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    console.log('üîç Checking database schema...');
    
    try {
      // ÂÖ®„É¶„Éº„Ç∂„Éº„ÇíÂèñÂæó„Åó„Å¶„Çπ„Ç≠„Éº„Éû„ÇíÁ¢∫Ë™ç
      const allUsers = await prisma.user.findMany({
        take: 1,
        select: {
          id: true,
          name: true,
          email: true,
          createdAt: true
        }
      });
      
      console.log('‚úÖ Database connection successful');
      console.log('üìä Current user count:', allUsers.length);
      
    } catch (error) {
      console.error('‚ùå Database schema error:', error.message);
      console.log('üí° You may need to run database migrations first');
      return;
    }
    
    // „É¶„Éº„Ç∂„Éº„ÇíÊ§úÁ¥¢
    const user = await prisma.user.findUnique({
      where: { email: adminEmail }
    });
    
    if (!user) {
      console.log(`‚ùå User with email ${adminEmail} not found`);
      console.log('Creating admin user...');
      
      // ÁÆ°ÁêÜËÄÖ„É¶„Éº„Ç∂„Éº„Çí‰ΩúÊàê
      const adminUser = await prisma.user.create({
        data: {
          email: adminEmail,
          name: 'Kentaro Admin',
          university: 'Admin University',
          grade: 'Admin',
          major: 'Administration'
        }
      });
      
      console.log('‚úÖ Admin user created:', adminUser);
    } else {
      console.log(`‚úÖ User found: ${user.name} (${user.email})`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Created: ${user.createdAt.toISOString()}`);
    }
    
    // ÂÖ®„É¶„Éº„Ç∂„Éº„ÅÆ‰∏ÄË¶ß„ÇíË°®Á§∫
    console.log('\nüìä All users:');
    const allUsers = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true
      },
      orderBy: { createdAt: 'desc' }
    });
    
    allUsers.forEach(user => {
      console.log(`- ${user.name} (${user.email}) - Created: ${user.createdAt.toISOString().split('T')[0]}`);
    });
    
    console.log('\nüí° Next steps:');
    console.log('1. Run database migrations to add admin fields');
    console.log('2. Update the set-admin script to use the new fields');
    console.log('3. Create admin dashboard for user management');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

setAdmin();
