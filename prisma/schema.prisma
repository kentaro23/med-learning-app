generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  image                 String?
  
  // 管理者権限
  isAdmin               Boolean        @default(false)
  
  // サブスクリプション情報
  subscriptionType      String         @default("free")
  subscriptionExpiresAt DateTime?
  
  // プロフィール情報
  university            String?
  grade                 String?
  major                 String?
  school                String?
  passwordHash          String?
  
  // ログイン履歴
  lastLoginAt           DateTime?
  
  // 使用制限の追跡
  dailyUsage            DailyUsage?
  
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @default(now()) @updatedAt
  
  bookmarks             Bookmark[]
  cardSets              CardSet[]
  docs                  Doc[]
  likes                 Like[]
  sessions              StudySession[]
}

model DailyUsage {
  id                   String   @id @default(cuid())
  userId               String   @unique
  date                 DateTime @default(now())
  aiQuestionsGenerated Int      @default(0)
  cardSetsStudied      Int      @default(0)
  pdfsProcessed        Int      @default(0)
  aiQuestionsLimit     Int      @default(5)
  cardSetsLimit        Int      @default(2)
  pdfsLimit            Int      @default(1)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id])
}

model CardSet {
  id          String         @id @default(cuid())
  ownerId     String
  title       String
  description String?
  visibility  String         @default("private")
  tags        String         @default("")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  bookmarks   Bookmark[]
  cards       Card[]
  owner       User           @relation(fields: [ownerId], references: [id])
  likes       Like[]
  sessions    StudySession[]
}

model Card {
  id        String      @id @default(cuid())
  cardSetId String
  question  String
  answer    String
  source    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  logs      AnswerLog[]
  cardSet   CardSet     @relation(fields: [cardSetId], references: [id])

  @@index([cardSetId])
}

model StudySession {
  id        String      @id @default(cuid())
  userId    String
  cardSetId String
  startedAt DateTime    @default(now())
  endedAt   DateTime?
  logs      AnswerLog[]
  cardSet   CardSet     @relation(fields: [cardSetId], references: [id])
  user      User        @relation(fields: [userId], references: [id])
}

model AnswerLog {
  id         String       @id @default(cuid())
  sessionId  String
  cardId     String
  isCorrect  Boolean
  answeredAt DateTime     @default(now())
  card       Card         @relation(fields: [cardId], references: [id])
  session    StudySession @relation(fields: [sessionId], references: [id])
}

model Like {
  id        String  @id @default(cuid())
  userId    String
  cardSetId String
  cardSet   CardSet @relation(fields: [cardSetId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, cardSetId])
}

model Bookmark {
  id        String  @id @default(cuid())
  userId    String
  cardSetId String
  cardSet   CardSet @relation(fields: [cardSetId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, cardSetId])
}

/// PDF資料本体と穴埋め（Cloze）情報
model Doc {
  id         String   @id @default(cuid())
  ownerId    String
  title      String
  visibility String   @default("private")
  sourceName String?
  textHash   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  clozes     Cloze[]
  owner      User     @relation(fields: [ownerId], references: [id])
}

model Cloze {
  id        String   @id @default(cuid())
  docId     String
  /// 原文の一部を[[blank]]で囲んだテキスト（マークダウン風）
  content   String
  /// AI自動提案のブランク数などのメタ
  meta      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  doc       Doc      @relation(fields: [docId], references: [id])
}
